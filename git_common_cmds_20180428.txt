1. git init
2. git config --global user.name "magicmmp"
3. git config --global user.email "2233973404@qq.com"
4. git remote add origin git@github.com:magicmmp/Algorithms.git
5. ssh-keygen -t rsa -C "2233973404@qq.com"
6. git pull origin master
7. git add *
8. git commit -m "info"
9. git remote rm origin
10. git remote add origin git@github.com:magicmmp/My_Python.git


1. git init
2. git config --global user.name "magicmmp"
3. git config --global user.email "2233973404@qq.com"
4. git remote add origin git@github.com:magicmmp/Algorithms.git
5. ssh-keygen -t rsa -C "2233973404@qq.com"
6. git pull origin master
7. git add *
8. git commit -m "info"
9. git remote rm origin
10. git remote add origin git@github.com:magicmmp/My_Python.git
选择一个合适的地方，创建一个空目录：git init命令把这个目录变成Git可以管理的仓库。
git add告诉Git，把文件添加到仓库：git add readme.txt
git commit告诉Git，把文件提交到仓库：git commit -m "wrote a readme file"
为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
$ git log --pretty=oneline
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：

$ git reset --hard HEAD^

只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164...，于是就可以指定回到未来的某个版本：
$ git reset --hard 3628164
HEAD is now at 3628164 append GPL
当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog
git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
$ git commit -m "understand how stage works"
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
git checkout -- readme.txt让这个文件回到最近一次git commit或git add时的状态。
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
$ git reset HEAD readme.txt
丢弃工作区的修改:git checkout -- readme.txt
又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "2233973404@qq.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。

本机当前仓库与远程库关联
$ git remote add origin git@github.com:magicmmp/My_Codes.git
把本地库的所有内容推送到远程库上：$ git push -u origin master,实际上是把当前分支master推送到远程。
小结

要关联一个远程库，使用命令 git remote add origin git@github.com:magicmmp/My_Codes.git

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
记录一些使用git过程中的bug

RT ! [rejected] master -> master (fetch first)

在push远程服务器的时候发现出现此错误；原因是没有同步远程的master

所以我们需要先同步一下

a.--> git pull origin master

b.--> git push origin master

用命令git clone从远端克隆一个本地库：git clone git@github.com:magicmmp/My_Codes.git

小结

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
小结

在GitHub上，可以任意Fork开源仓库；

自己拥有Fork后的仓库的读写权限；

可以推送pull request给官方仓库来贡献代码。










































